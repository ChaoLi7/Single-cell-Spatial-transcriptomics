############## NSCC
####### Cellranger mapping
for i in sample_id
do
    # Create a .sh file for each sample
    cat <<EOL > ${i}.sh
#!/bin/bash
cd /path/

cellranger count \
        --id=$i \
        --fastqs=/path/fastq/$i \
        --sample=$i \
        --transcriptome=/path/ref/refdata-gex-GRCh38-2024-A \
        --create-bam=true \
        --localcores=16 \
        --localmem=200
EOL
    # Give the script execute permissions
    chmod +x ${i}.sh
    qsub XXX
done


############## downstream analysis in R ##############
####### Load Data
# We start by loading the filtered gene expression matrix generated by cellranger count.

conda activate my_r4.4.1_env
library(Seurat)
library(ggplot2)

# Define paths to the filtered feature-barcode matrix
sample_id_path <- "sample_id/outs/filtered_feature_bc_matrix"


# Load gene expression data from Cell Ranger output
sample_id <- Read10X(data.dir = sample_id_path)

# Create Seurat objects for each sample
sample_id_seurat <- CreateSeuratObject(counts = sample_id, project = "sample_id")

# Print the number of cells before filtering
cat("sample_id cell count:", ncol(sample_id_seurat), "\n")

# Output: Initial number of cells in each sample.

####### Quality Control & Filtering
# Standard QC criteria:
# Remove cells with too few or too many detected genes (200 < nFeature_RNA)
# Remove cells with high mitochondrial content (>10%)

# Compute the percentage of mitochondrial reads
sample_id_seurat[["percent.mt"]] <- PercentageFeatureSet(sample_id_seurat, pattern = "^MT-")

# Filter out low-quality cells
sample_id_seurat <- subset(sample_id_seurat, subset = nFeature_RNA > 200 & percent.mt < 10)

# Print the number of cells after filtering
cat("sample_id cell count after filtering:", ncol(sample_id_seurat), "\n")

# Output: Number of cells before and after filtering.

####### Data Normalization & PCA

# Normalize the data
sample_id_seurat <- NormalizeData(sample_id_seurat)

# Identify highly variable genes
sample_id_seurat <- FindVariableFeatures(sample_id_seurat, selection.method = "vst", nfeatures = 2000)

# Scale data and perform PCA
sample_id_seurat <- ScaleData(chcx_seurat)
sample_id_seurat <- RunPCA(chcx_seurat)

####### Cell Clustering & UMAP Visualization

# Find nearest neighbors and cluster cells
sample_id_seurat <- FindNeighbors(sample_id_seurat, dims = 1:20)
sample_id_seurat <- FindClusters(sample_id_seurat, resolution = 0.5)
sample_id_seurat <- RunUMAP(sample_id_seurat, dims = 1:20)

# Visualize clustering with UMAP
umap_sample_id <- DimPlot(sample_id_seurat, reduction = "umap", label = TRUE) + ggtitle("sample_id UMAP")
ggsave("sample_id_UMAP.pdf", plot = umap_sample_id, width = 8, height = 6)

# Output: UMAP plots showing cell clustering.

####### Cell Type Annotation
# To annotate cell types, we use known marker genes:



